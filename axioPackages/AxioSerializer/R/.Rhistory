objectsInDataBase
evironment
.GlobalEnv$test<-1
ObjectToRead<-objectsInDataBase[1]
databaseConnection<-mydb
tmpSerializedObject<-dbReadTable(databaseConnection,objectToRead)
objectToRead<-objectsInDataBase[1]
tmpSerializedObject<-dbReadTable(databaseConnection,objectToRead)
GenerateRawVector<-function(x,tmpEnv){
tmpRaw<-charToRaw(x)
if(length(tmpRaw)!=0) tmpEnv$serializedVector[tmpEnv$counter]<-tmpRaw
tmpEnv$counter<-tmpEnv$counter+1
}
a<-new.env()
a$counter<-1
a$serializedVector<-raw(length(tmpSerializedObject$serializedObject))
lapply(tmpSerializedObject$serializedObject,GenerateRawVector,a)
unserializedObject<-unserialize(a$serializedVector)
eval(expression(paste0(".GlobalEnv$",objectToRead,"<-unserializedObject")))
eval(parse(text=paste0(".GlobalEnv$",objectToRead,"<-unserializedObject")))
returnAllObjectsFromDB<-function(databaseToReadFrom){
if(".DB"!=substring(databaseToReadFrom,nchar(databaseToReadFrom)-2,nchar(databaseToReadFrom))){
stop("please use '.DB' at the end of your database name!")
}
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToReadFrom)
objectsInDataBase<-dbListTables(mydb)
lapply(objectsInDataBase,function(objectToRead,databaseConnection){
tmpSerializedObject<-dbReadTable(databaseConnection,objectToRead)
GenerateRawVector<-function(x,tmpEnv){
tmpRaw<-charToRaw(x)
if(length(tmpRaw)!=0) tmpEnv$serializedVector[tmpEnv$counter]<-tmpRaw
tmpEnv$counter<-tmpEnv$counter+1
}
a<-new.env()
a$counter<-1
a$serializedVector<-raw(length(tmpSerializedObject$serializedObject))
lapply(tmpSerializedObject$serializedObject,GenerateRawVector,a)
unserializedObject<-unserialize(a$serializedVector)
eval(parse(text=paste0(".GlobalEnv$",objectToRead,"<-unserializedObject")))
},mydb)
rm(unserializedObject,envir = .GlobalEnv)
}
returnAllObjectsFromDB<-function(databaseToReadFrom){
if(".DB"!=substring(databaseToReadFrom,nchar(databaseToReadFrom)-2,nchar(databaseToReadFrom))){
stop("please use '.DB' at the end of your database name!")
}
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToReadFrom)
objectsInDataBase<-dbListTables(mydb)
lapply(objectsInDataBase,function(objectToRead,databaseConnection){
tmpSerializedObject<-dbReadTable(databaseConnection,objectToRead)
GenerateRawVector<-function(x,tmpEnv){
tmpRaw<-charToRaw(x)
if(length(tmpRaw)!=0) tmpEnv$serializedVector[tmpEnv$counter]<-tmpRaw
tmpEnv$counter<-tmpEnv$counter+1
}
a<-new.env()
a$counter<-1
a$serializedVector<-raw(length(tmpSerializedObject$serializedObject))
lapply(tmpSerializedObject$serializedObject,GenerateRawVector,a)
unserializedObject<-unserialize(a$serializedVector)
eval(parse(text=paste0(".GlobalEnv$",objectToRead,"<-unserializedObject")))
},mydb)
dbDisconnect(mydb)
rm(unserializedObject,envir = .GlobalEnv)
}
dbDisconnect(mydb)
dbDisconnect(databaseConnection)
returnAllObjectsFromDB("test123.DB")
readObjectFromDB<-function(objectToRead,databaseToReadFrom){
if(".DB"!=substring(databaseToReadFrom,nchar(databaseToReadFrom)-2,nchar(databaseToReadFrom))){
stop("please use '.DB' at the end of your database name!")
}
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToReadFrom)
tmpSerializedObject<-dbReadTable(mydb,objectToRead)
dbDisconnect(mydb)
GenerateRawVector<-function(x,tmpEnv){
tmpRaw<-charToRaw(x)
if(length(tmpRaw)!=0) tmpEnv$serializedVector[tmpEnv$counter]<-tmpRaw
tmpEnv$counter<-tmpEnv$counter+1
}
a<-new.env()
a$counter<-1
a$serializedVector<-raw(length(tmpSerializedObject$serializedObject))
lapply(tmpSerializedObject$serializedObject,GenerateRawVector,a)
unserializedObject<-unserialize(a$serializedVector)
return(unserializedObject)
}
returnAllObjectsFromDB<-function(databaseToReadFrom){
if(".DB"!=substring(databaseToReadFrom,nchar(databaseToReadFrom)-2,nchar(databaseToReadFrom))){
stop("please use '.DB' at the end of your database name!")
}
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToReadFrom)
objectsInDataBase<-dbListTables(mydb)
lapply(objectsInDataBase,function(objectToRead,databaseConnection){
tmpSerializedObject<-dbReadTable(databaseConnection,objectToRead)
GenerateRawVector<-function(x,tmpEnv){
tmpRaw<-charToRaw(x)
if(length(tmpRaw)!=0) tmpEnv$serializedVector[tmpEnv$counter]<-tmpRaw
tmpEnv$counter<-tmpEnv$counter+1
}
a<-new.env()
a$counter<-1
a$serializedVector<-raw(length(tmpSerializedObject$serializedObject))
lapply(tmpSerializedObject$serializedObject,GenerateRawVector,a)
unserializedObject<-unserialize(a$serializedVector)
eval(parse(text=paste0(".GlobalEnv$",objectToRead,"<-unserializedObject")))
},mydb)
dbDisconnect(mydb)
rm(unserializedObject,envir = .GlobalEnv)
}
returnAllObjectsFromDB("test123.DB")
writeObjectToDB<-function(objectToSave,databaseToWriteTo,overwriteEntry=FALSE){
if(".DB"!=substring(databaseToWriteTo,nchar(databaseToWriteTo)-2,nchar(databaseToWriteTo))){
stop("please use '.DB' at the end of your database name!")
}
objectToSaveName<-deparse(substitute(objectToSave))
serialized<-serialize(objectToSave,NULL)
serializeddata<-data.frame(serializedObject=rawToChar(serialized,TRUE))
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToWriteTo)
dbWriteTable(mydb,objectToSaveName,serializeddata,overwrite=overwriteEntry)
return(dbDisconnect(mydb))
}
readObjectFromDB<-function(objectToRead,databaseToReadFrom){
if(".DB"!=substring(databaseToReadFrom,nchar(databaseToReadFrom)-2,nchar(databaseToReadFrom))){
stop("please use '.DB' at the end of your database name!")
}
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToReadFrom)
tmpSerializedObject<-dbReadTable(mydb,objectToRead)
dbDisconnect(mydb)
GenerateRawVector<-function(x,tmpEnv){
tmpRaw<-charToRaw(x)
if(length(tmpRaw)!=0) tmpEnv$serializedVector[tmpEnv$counter]<-tmpRaw
tmpEnv$counter<-tmpEnv$counter+1
}
a<-new.env()
a$counter<-1
a$serializedVector<-raw(length(tmpSerializedObject$serializedObject))
lapply(tmpSerializedObject$serializedObject,GenerateRawVector,a)
unserializedObject<-unserialize(a$serializedVector)
return(unserializedObject)
}
returnAllObjectsFromDB<-function(databaseToReadFrom){
if(".DB"!=substring(databaseToReadFrom,nchar(databaseToReadFrom)-2,nchar(databaseToReadFrom))){
stop("please use '.DB' at the end of your database name!")
}
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToReadFrom)
objectsInDataBase<-dbListTables(mydb)
lapply(objectsInDataBase,function(objectToRead,databaseConnection){
tmpSerializedObject<-dbReadTable(databaseConnection,objectToRead)
GenerateRawVector<-function(x,tmpEnv){
tmpRaw<-charToRaw(x)
if(length(tmpRaw)!=0) tmpEnv$serializedVector[tmpEnv$counter]<-tmpRaw
tmpEnv$counter<-tmpEnv$counter+1
}
a<-new.env()
a$counter<-1
a$serializedVector<-raw(length(tmpSerializedObject$serializedObject))
lapply(tmpSerializedObject$serializedObject,GenerateRawVector,a)
unserializedObject<-unserialize(a$serializedVector)
#put values into global environment
eval(parse(text=paste0(".GlobalEnv$",objectToRead,"<-unserializedObject")))
},mydb)
dbDisconnect(mydb)
}
exampleObject<-c(1,2,3,4,5,6,7,8,9)
#creates a db "test123" at the
writeObjectToDB(exampleObject,"test123.DB",overwriteEntry=TRUE)
tmp<-readObjectFromDB("exampleObject","test123.DB")
testthat::expect_identical(tmp,exampleObject)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lmD9 <- lm(weight ~ group)
writeObjectToDB(lmD9,"test123.DB",overwriteEntry=TRUE)
lmtmp<-readObjectFromDB("lmD9","test123.DB")
testthat::expect_identical(lmtmp,lmD9)
returnAllObjectsFromDB("test123.DB")
testthat::expect_identical(tmp,exampleObject)
testthat::expect_identical(lmtmp,lmD9)
returnMultipleObjectsFromDB<-function(databaseToReadFrom,objectNames=NULL){
if(".DB"!=substring(databaseToReadFrom,nchar(databaseToReadFrom)-2,nchar(databaseToReadFrom))){
stop("please use '.DB' at the end of your database name!")
}
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToReadFrom)
if(is.null(objectNames)){
objectNames<-dbListTables(mydb)
}
lapply(objectNames,function(objectToRead,databaseConnection){
tmpSerializedObject<-dbReadTable(databaseConnection,objectToRead)
GenerateRawVector<-function(x,tmpEnv){
tmpRaw<-charToRaw(x)
if(length(tmpRaw)!=0) tmpEnv$serializedVector[tmpEnv$counter]<-tmpRaw
tmpEnv$counter<-tmpEnv$counter+1
}
a<-new.env()
a$counter<-1
a$serializedVector<-raw(length(tmpSerializedObject$serializedObject))
lapply(tmpSerializedObject$serializedObject,GenerateRawVector,a)
unserializedObject<-unserialize(a$serializedVector)
#put values into global environment
eval(parse(text=paste0(".GlobalEnv$",objectToRead,"<-unserializedObject")))
},mydb)
dbDisconnect(mydb)
}
returnAllObjectsFromDB("test123.DB")
saveRDS(lmD9,"lmD9.RDS")
saveRDS(exampleObject,"exampleObject.RDS")
36864-(1342+66)
microbench
??microbench
install.packages('microbrenchmark')
install.packages('microbenchmark')
testRDS<-function(objectsName){
lapply(objectName,function(x){
tmp<-readRDS(x)
eval(parse(text=paste0(".GlobalEnv$",gsub(".RDS","",x),"<-tmp")))
})
}
microbench<-microbenchmark(
returnMultipleObjectsFromDB("test123.DB",c("exampleObject","lmD9")),
testRDS(c("exampleObject.RDS","lmD9.RDS"))
)
library(microbenchmark)
microbench<-microbenchmark(
returnMultipleObjectsFromDB("test123.DB",c("exampleObject","lmD9")),
testRDS(c("exampleObject.RDS","lmD9.RDS"))
)
testRDS<-function(objectsName){
lapply(objectsName,function(x){
tmp<-readRDS(x)
eval(parse(text=paste0(".GlobalEnv$",gsub(".RDS","",x),"<-tmp")))
})
}
microbench<-microbenchmark(
returnMultipleObjectsFromDB("test123.DB",c("exampleObject","lmD9")),
testRDS(c("exampleObject.RDS","lmD9.RDS"))
)
summary(microbench)
boxplot(microbench)
esOut<-readRDS("Projects/ShinyDemo/ShinyGWAS/esOut.rds")
writeObjectToDB(esOut,"test123.DB")
saveRDS(esOut,"esOut.RDS")
objects<-c("exampleObject","lmD9","esOut")
microbench<-microbenchmark(
returnMultipleObjectsFromDB("test123.DB",objects),
testRDS(objects)
)
microbench<-microbenchmark(
returnMultipleObjectsFromDB("test123.DB",objects),
testRDS(paste0(objects,".RDS"))
)
microbench
microbench<-microbenchmark(
returnMultipleObjectsFromDB("test123.DB","esOut"),
testRDS("osOut.RDS")
)
microbench<-microbenchmark(
returnMultipleObjectsFromDB("test123.DB","esOut"),
testRDS("esOut.RDS")
)
testRDS("esOut.RDS")
system.time(returnMultipleObjectsFromDB("test123.DB","esOut"))
System.time(testRDS("esOut.RDS"))
system.time(testRDS("esOut.RDS"))
readObjectFromDB("esOut","test123.DB")
system.time(testRDS("esOut.RDS"))
system.time(readObjectFromDB("esOut","test123.DB"))
system.time(testRDS("esOut.RDS"))
system.time(readObjectFromDB("esOut","test123.DB"))
system.time(readObjectFromDB("esOut","test123.DB"))
?DBI
writeObjectToDB(esOut,"test123.DB")
esoutTMP<-readObjectFromDB("esOut","test123.DB")
testthat::is_identical_to(esOut,esoutTMP)
testthat::expect_identical(esOut,esoutTMP)
mkdir
?mkdir
dir.create
?dir.create
writeObjectToDB<-function(objectsToSave,databaseToWriteTo,overwriteEntry=FALSE){
if(".DB"!=substring(databaseToWriteTo,nchar(databaseToWriteTo)-2,nchar(databaseToWriteTo))){
stop("please use '.DB' at the end of your database name!")
}
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToWriteTo)
lapply(objectsToSave,function(objectToSave,dbconn){
objectToSaveName<-deparse(substitute(objectToSave))
serialized<-serialize(objectToSave,NULL)
serializeddata<-data.frame(serializedObject=rawToChar(serialized,TRUE))
dbWriteTable(dbconn,objectToSaveName,serializeddata,overwrite=overwriteEntry)
},mydb)
return(dbDisconnect(mydb))
}
test1<-c(1,2,3,4,5)
test2<-c(5,6,7,8,9)
writeObjectToDB(list(test1,test2),"test123.DB")
writeObjectToDB<-function(objectToSave,databaseToWriteTo,overwriteEntry=FALSE){
if(".DB"!=substring(databaseToWriteTo,nchar(databaseToWriteTo)-2,nchar(databaseToWriteTo))){
stop("please use '.DB' at the end of your database name!")
}
objectToSaveName<-deparse(substitute(objectToSave))
serialized<-serialize(objectToSave,NULL)
serializeddata<-data.frame(serializedObject=rawToChar(serialized,TRUE))
library(RSQLite) #calls DBI too
mydb<-dbConnect(SQLite(),dbname=databaseToWriteTo)
dbWriteTable(mydb,objectToSaveName,serializeddata,overwrite=overwriteEntry)
return(dbDisconnect(mydb))
}
writeObjectToDB(esOut,"test123.DB")
mydb<-dbConnect(SQLite(),"test123.DB")
dbListTables(mydb)
dbDisconnect(mydb)
dbDisconnect(mydb)
setwd("Projects/AxioSerializer/")
devtools::document()
devtools::document()
devtools::document(pkg = ".")
setwd("Projects/AxioSerializer/R")
setwd("..")
gewd()
getwd()
setwd("AxioSerializer/R/")
devtools::document(pkg = ".")
roxygen2::roxygenise()
devtools::create("AxioSerializer")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("formatR")
formatR::tidy_dir(".")
is.environment(eval(".GlobalEnv"))
is.environment(eval(parse(".GlobalEnv")))
is.environment(eval(parse(text=".GlobalEnv")))
a<-new.env()
e<-a
eval(parse(text=paste0(a,"$","test<-123")))
deparse(substitute(o))
deparse(substitute(e))
deparse(substitute("e"))
devtools::document()
devtools::document()
?
returnMultipleObjectsFromDB
?readObjectsFromDB
?readObjectFromDB
?readRDS
devtools::document()
?writeObjectToDB
?writeObjectToDB
devtools::document()
devtools::document()
devtools::document()
?writeObjectToDB
identical(c(1,2,3,4),c(1,2,3,4))
devtools::document()
devtools::document()
?writeObjectToDB
devtools::use_testthat()
System.Info
session.info
Session.Info
sessionInfo()
test<-sessionInfo()
test$platform
test$locale
test$R.version
testObject1<-c(1,2,3)
writeObjectToDB(testObject1,"Test_Writing.DB"
testthat::expect_silent())
writeObjectToDB(testObject1,"Test_Writing.DB")
library(AxioSerializer)
writeObjectToDB(testObject1,"Test_Writing.DB")
library(RSQLite)
devtools::document()
library(AxioSerializer)
path.package( "AxioSerializer" )
pathToFiles <- file.path( path.package( "AxioSerializer" ) , "TestData" )
pathToFiles
pathToFiles <- file.path( path.package( "AxioSerializer" ) , "tests","testthatdata" )
testObject1<-c(1,2,3)
testObject2<-c(testObject1,4,5,6)
test_that("Normal Vectors Can be written into the database",{
testObject1<-c(1,2,3)
testObject2<-c(testObject1,4,5,6)
expect_silent(writeObjectToDB(testObject1,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
expect_silent(writeObjectToDB(testObject2,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
})
library(testthat)
test_that("Normal Vectors Can be written into the database",{
testObject1<-c(1,2,3)
testObject2<-c(testObject1,4,5,6)
expect_silent(writeObjectToDB(testObject1,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
expect_silent(writeObjectToDB(testObject2,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
})
library(AxioSerializer)
library(testthat)
context("Storing Serialize Objects")
pathToFiles <- file.path( path.package( "AxioSerializer" ) , "tests","testthatdata" )
test_that("Normal Vectors Can be written into the database",{
testObject1<-c(1,2,3)
testObject2<-c(testObject1,4,5,6)
expect_silent(writeObjectToDB(testObject1,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
expect_silent(writeObjectToDB(testObject2,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
})
testObject1<-c(1,2,3)
testObject2<-c(testObject1,4,5,6)
expect_silent(writeObjectToDB(testObject1,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
file.path(pathToFiles,"Test_Writing.DB")
expect_silent(writeObjectToDB(testObject1,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
expect_silent(writeObjectToDB(testObject2,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
test_that("Normal Vectors Can be written into the database",{
testObject1<-c(1,2,3)
testObject2<-c(testObject1,4,5,6)
expect_silent(writeObjectToDB(testObject1,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
expect_silent(writeObjectToDB(testObject2,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
})
test_that("Muli-level objects Can be written into the database",{
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lmD9 <- lm(weight ~ group)
expect_silent(writeObjectToDB(lmD9,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
})
test_that("Will not overwrite another object unless told to",{
overwritingTestObject<-c(1,2,3)
expect_silent(writeObjectToDB(overwritingTestObject,file.path(pathToFiles,"Test_Writing.DB")))
expect_silent(writeObjectToDB(overwritingTestObject,file.path(pathToFiles,"Test_Writing.DB"),overwriteEntry = TRUE))
expect_error(writeObjectToDB(overwritingTestObject,file.path(pathToFiles,"Test_Writing.DB")))
})
file.remove(file.path(pathToFiles,"Test_Writing.DB"))
tables<-dbListTables(testwritingConn)
testwritingConn<-dbConnect(SQLite(),file.path(pathToDB,"Test_Writing.DB"))
pathToDB <- file.path( path.package( "AxioSerializer" ) , "tests","testthatdata" )
testwritingConn<-dbConnect(SQLite(),file.path(pathToDB,"Test_Writing.DB"))
tables<-dbListTables(testwritingConn)
for(table in tables){
dbRemoveTable(testwritingConn,table)
}
tables<-dbListTables(testwritingConn)
dbDisconnect(testwritingConn)
library(AxioSerializer)
library(testthat)
context("Storing Serialize Objects")
pathToDB <- file.path( path.package( "AxioSerializer" ) , "tests","testthatdata" ,"Test_Reading.DB")
test_that("Normal Vectors can be read properly from the database",{
testObject1<-c(1,2,3)
testObject2<-c(testObject1,4,5,6)
writeObjectToDB(testObject1,pathToDB,overwriteEntry = TRUE)
writeObjectToDB(testObject2,pathToDB,overwriteEntry = TRUE)
expect_equal(readObjectFromDB("testObject1",pathToDB),testObject1)
expect_equal(readObjectFromDB("testObject2",pathToDB),testObject2)
})
test_that("Muli-level objects Can be read properly from the database",{
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lmD9 <- lm(weight ~ group)
writeObjectToDB(lmD9,pathToDB,overwriteEntry = TRUE)
expect_equal(readObjectFromDB("lmD9",pathToDB),lmD9)
})
testwritingConn<-dbConnect(SQLite(),pathToDB)
tables<-dbListTables(testwritingConn)
for(table in tables){
dbRemoveTable(testwritingConn,table)
}
dbDisconnect(testwritingConn)
devtools::check()
testwritingConn<-dbConnect(SQLite(),pathToDB)
tables<-dbListTables(testwritingConn)
for(table in tables){
dbRemoveTable(testwritingConn,table)
}
dbDisconnect(testwritingConn)
pathToDB <- file.path( path.package( "AxioSerializer" ) , "tests","testthatdata" ,"Test_Reading.DB")
testwritingConn<-dbConnect(SQLite(),pathToDB)
tables<-dbListTables(testwritingConn)
for(table in tables){
dbRemoveTable(testwritingConn,table)
}
dbDisconnect(testwritingConn)
testwritingConn<-dbConnect(SQLite(),pathToDB)
tables<-dbListTables(testwritingConn)
for(table in tables){
dbRemoveTable(testwritingConn,table)
}
dbDisconnect(testwritingConn)
testwritingConn<-dbConnect(SQLite(),pathToDB)
tables<-dbListTables(testwritingConn)
for(table in tables){
dbRemoveTable(testwritingConn,table)
}
dbDisconnect(testwritingConn)
testwritingConn<-dbConnect(SQLite(),pathToDB)
tables<-dbListTables(testwritingConn)
for(table in tables){
dbRemoveTable(testwritingConn,table)
}
dbDisconnect(testwritingConn)
devtools::test()
